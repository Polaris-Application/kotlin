package com.example.test.presentation.screen

import android.content.Intent
import android.widget.Toast
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.example.test.presentation.viewmodel.LoginViewModel
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import android.app.Activity
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ChangePasswordScreen(
    navController: NavController? = null
) {
    val context = LocalContext.current
    val viewModel: LoginViewModel = hiltViewModel()  // ÿØÿ±€åÿßŸÅÿ™ ViewModel ÿßÿ≤ Hilt
    var oldPass by remember { mutableStateOf("") }
    var newPass by remember { mutableStateOf("") }
    var error by remember { mutableStateOf<String?>(null) }

    // ÿ™ÿßÿ®ÿπ€å ÿ®ÿ±ÿß€å ÿßŸÜÿ¨ÿßŸÖ ÿ™ÿ∫€å€åÿ± ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ±
    val onPasswordChanged = {
        Toast.makeText(context, "ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ™ÿ∫€å€åÿ± ⁄©ÿ±ÿØ", Toast.LENGTH_SHORT).show()
        if (navController != null) {
            navController.popBackStack()  // ÿ®ÿ±⁄Øÿ¥ÿ™ ÿ®Ÿá ÿµŸÅÿ≠Ÿá ŸÇÿ®ŸÑ€å ÿ®ÿß ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ NavController
        } else {
            (context as? Activity)?.finish()  // ÿØÿ± ÿµŸàÿ±ÿ™€å ⁄©Ÿá navController ŸÜÿ®ÿßÿ¥ÿØÿå ÿßÿ≤ finish ÿ®ÿ±ÿß€å ÿ®ÿ≥ÿ™ŸÜ Activity ÿßÿ≥ÿ™ŸÅÿßÿØŸá ŸÖ€å‚Äå⁄©ŸÜ€åŸÖ
        }
    }

    // Activity ÿ®ÿ±ÿß€å Ÿæÿß€åÿßŸÜ ÿØÿßÿØŸÜ ÿ®Ÿá ÿµŸÅÿ≠Ÿá ÿØÿ± ÿµŸàÿ±ÿ™ ŸÑÿ≤ŸàŸÖ
    val activity = context as? Activity

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text("   ÿ™ÿ∫€å€åÿ± ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ±", modifier = Modifier.fillMaxWidth(), textAlign = TextAlign.Center)
                },
                navigationIcon = {
                    IconButton(onClick = {
                        if (navController != null) {
                            navController.popBackStack()
                        } else {
                            activity?.finish()
                        }
                    }) {
                        Icon(
                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "ÿ®ÿßÿ≤⁄Øÿ¥ÿ™",
                            tint = MaterialTheme.colorScheme.primary
                        )
                    }
                }
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(24.dp),
            verticalArrangement = Arrangement.Center
        ) {
            Text(
                text = "ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± ŸÇÿ®ŸÑ€å Ÿà ÿ¨ÿØ€åÿØ ÿ±Ÿà Ÿàÿßÿ±ÿØ ⁄©ŸÜ",
                textAlign = TextAlign.Right,
                modifier = Modifier.fillMaxWidth()
            )

            Spacer(modifier = Modifier.height(16.dp))

            OutlinedTextField(
                value = oldPass,
                onValueChange = { oldPass = it },
                label = { Text("ÿ±ŸÖÿ≤ ŸÇÿ®ŸÑ€å") },
                visualTransformation = PasswordVisualTransformation(),
                modifier = Modifier.fillMaxWidth()
            )

            Spacer(modifier = Modifier.height(8.dp))

            OutlinedTextField(
                value = newPass,
                onValueChange = { newPass = it },
                label = { Text("ÿ±ŸÖÿ≤ ÿ¨ÿØ€åÿØ") },
                visualTransformation = PasswordVisualTransformation(),
                modifier = Modifier.fillMaxWidth()
            )

            error?.let {
                Spacer(modifier = Modifier.height(8.dp))
                Text(it, color = MaterialTheme.colorScheme.error)
            }

            Spacer(modifier = Modifier.height(24.dp))

            Button(onClick = {
                if (!viewModel.verifyPassword(context, oldPass)) {
                    error = "ÿ±ŸÖÿ≤ ŸÇÿ®ŸÑ€å ÿßÿ¥ÿ™ÿ®ÿßŸáŸá"
                } else if (newPass.length < 4) {
                    error = "ÿ±ŸÖÿ≤ ÿ¨ÿØ€åÿØ ÿ®ÿß€åÿØ ÿ≠ÿØÿßŸÇŸÑ €¥ ⁄©ÿßÿ±ÿß⁄©ÿ™ÿ± ÿ®ÿßÿ¥Ÿá"
                } else {
                    viewModel.updatePassword(context, newPass)
                    onPasswordChanged()  // ŸÅÿ±ÿßÿÆŸàÿßŸÜ€å ÿ™ÿßÿ®ÿπ ÿ™ÿ∫€å€åÿ± ÿ±ŸÖÿ≤
                }
            }, modifier = Modifier.fillMaxWidth()) {
                Text("ÿ™ÿ∫€å€åÿ± ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± üîí")
            }
        }
    }
}
